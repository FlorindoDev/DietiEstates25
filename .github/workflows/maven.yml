# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.


name: Java CI with Maven

env:
  SONAR_PROJECT_DIR: MicroService  # Cartella MAVEN

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    container:
      image: maven:3.9.6-eclipse-temurin-21

    steps:
      - name: Checkout code
        uses: actions/checkout@v4   
        with:
          fetch-depth: 0  # Necessario per SonarQube per l'analisi completa

      #- name: Build with Maven
        #run: mvn -B package --file MicroService/pom.xml -X
        #with:
          #fetch-depth: 0  # Necessario per SonarQube per l'analisi completa
          # -Dsonar.qualitygate.wait=true \
          # -Dsonar.qualitygate.timeout=300

      - name: SonarQube Scan
        run: |
          mvn clean verify -X sonar:sonar \
            -Dsonar.projectKey=DietiEstate \
            -Dsonar.projectName='DietiEstate' \
            --file $SONAR_PROJECT_DIR/pom.xml \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            
          
            

      - name: Build with Maven
        run: mvn -B package --file $SONAR_PROJECT_DIR/pom.xml -X

        
       

  
